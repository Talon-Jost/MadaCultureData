citation()
knitr::opts_chunk$set(echo = TRUE)
library(isolateR)
remotes::install_github("bdaisley/isolateR.git")
remotes::install_github("github.com/bdaisley/isolateR.git")
remotes::install_github("bdaisley/isolateR")
#Install the required Bioconductor dependencies
BiocManager::install(c("Biostrings", "msa", "sangeranalyseR", "sangerseqR"), update=FALSE)
library(Biostrings)
library(msa)
library(sangeranalyseR)
library(sangerseqR)
fasta <- seqinr::read.fasta("MadaCultureDB_seqs_dupsfilt.fasta")
isoTAX.S4 <- isoTAX(input=fasta,
export_html=TRUE,
export_csv=TRUE,
db="16S",
quick_search=TRUE,
phylum_threshold=75.0,
class_threshold=78.5,
order_threshold=82.0,
family_threshold=86.5,
genus_threshold=96.5,
species_threshold=98.7)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
rm(list = ls())
library(tidyverse)
# Chunk 3
## merging Madagascar database metadata (culture info, etc) with Vsearch 100% clusterIDs
## sorted by seq plate, toxonomy string then isolate ID in excel before creation
MadaDBdata = read_tsv("./MadaCultureDB_Metadata.txt")
setwd("C:/Users/tpj5244/The Pennsylvania State University/Bletz, Molly C - CultureData")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
rm(list = ls())
library(tidyverse)
# Chunk 3
## merging Madagascar database metadata (culture info, etc) with Vsearch 100% clusterIDs
## sorted by seq plate, toxonomy string then isolate ID in excel before creation
MadaDBdata = read_tsv("./MadaCultureDB_Metadata.txt")
## This deals with the duplicate entries for the isolates; its not perfect, it just selects the first entry from the sorted file
MadaDBdata_filt = MadaDBdata %>%
group_by(Isolate.ID) %>% slice_head() %>% # filters to 1 sequence per group
ungroup() %>%
select(Isolate.ID,Frog.ID,`proportion growth 1`,`anti-Bd Class (80%)`,Taxnonomy,DirTax_Phylum,DirTax_Class,DirTax_Order,DirTax_Family,DirTax_Genus,DirTax_Species) # selecting only a subset of columns for now for easier viewing
# Chunk 4
#(vsearch) mcbletz@Mollys-MacBook-Pro-2 ~ % vsearch --cluster_fast /Users/mcbletz/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/Bletz_Lab/Computational_Resources/Datasets/CultureData/MadaCultureDB_seqs_dupsfilt.fasta --uc /Users/mcbletz/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/Bletz_Lab/Computational_Resources/Datasets/CultureData/MadaCultureDB_seqs_clustered_per100_050725.txt --id 1 --strand both
##*** MODIFIED HEADERS AND COLUMNS MANUALLY IN EXCEL
## Vsearch done with fasta from MadaDB file filtered for duplicates; this has more isolates than AmphiBac; This is the vsearch output (code above); Dup filtering completed with MadaDB_VsearchClusterMergeCode.R file.
MadaDB_VsearchClusters2 = read_tsv("./MadaCultureDB_seqs_clustered_per100_050725.txt") %>%
select(Record,Cluster,Isolate.ID,Id.Match) # selecting relevant columns
# Chunk 5
## merging clustering with Mada DB metadata that has had the dubs filtered
## NOTE Vsearch was not done with the duplicate filtered fasta...I think that's OK for now.but it does mean that there could be isolates with same ID that are "different" clusters because there are some that didn't ID to the same taxonomy.
MadaDB_VsearchClusters_wdata = left_join(MadaDB_VsearchClusters2,
MadaDBdata_filt,
by = "Isolate.ID")
#write_tsv(MadaDB_VsearchClusters_wdata,"./MadaCultureDB_Metadata_wVsearchClusters.txt")
# Chunk 6
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
#need this to have the full list of ids to make the tree
MadaDB_VsearchClusters_wdata_nest.singleton = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
#filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
##matching this to where I can actually get the isolate IDs to match the cluster.
singelton.ids <- MadaDB_VsearchClusters_wdata_nest.singleton$Cluster
singleton.df <- MadaDB_VsearchClusters2 %>%
dplyr::filter(Cluster %in% singelton.ids) %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df2 <- MadaDB_VsearchClusters_wdata_nest.singleton %>%
dplyr::mutate(IsSingleton = purrr::map_int(data, nrow) == 1)
singleton.df2 <- singleton.df2 %>%
dplyr::left_join(MadaDB_VsearchClusters2, by = "Cluster") %>%
dplyr::filter(!Record=="C") %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df3 <- singleton.df2 %>%
dplyr::left_join(MadaDBdata_filt, by = "Isolate.ID") %>%
dplyr::rename(Inhibition = `anti-Bd Class (80%)`)
singleton.df3 <- singleton.df3 %>%
dplyr::select(Cluster, IsSingleton, tip.label) %>%
dplyr::rename(Isolate.ID = "tip.label")
library(ape)
tree.original <- ape::read.tree('trees/tree/nwk/madaDB.rooted.tree.nwk')
plot(tree.original)
names.to.keep <- singleton.df3$tip.label
keep <- intersect(names.to.keep, tree.original$tip.label)
tree.pruned <- keep.tip(tree.original, keep)
tree.pruned$tip.label
plot(tree.pruned)
singleton.df3 <- singleton.df3 %>%
dplyr::rename(Isolate.ID = "tip.label") %>%
dplyr::select(Cluster, IsSingleton, tip.label)
singleton.df2 <- MadaDB_VsearchClusters_wdata_nest.singleton %>%
dplyr::mutate(IsSingleton = purrr::map_int(data, nrow) == 1)
singleton.df2 <- singleton.df2 %>%
dplyr::left_join(MadaDB_VsearchClusters2, by = "Cluster") %>%
dplyr::filter(!Record=="C") %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df3 <- singleton.df2 %>%
dplyr::left_join(MadaDBdata_filt, by = "Isolate.ID") %>%
dplyr::rename(Inhibition = `anti-Bd Class (80%)`)
singleton.df3b <- singleton.df3 %>%
dplyr::rename(Isolate.ID = "tip.label") %>%
dplyr::select(Cluster, IsSingleton, tip.label)
View(singleton.df3)
singleton.df3b <- singleton.df3 %>%
dplyr::rename(tip.label = Isolate.ID = ) %>%
singleton.df3b <- singleton.df3 %>%
dplyr::rename(tip.label = Isolate.ID) %>%
dplyr::select(Cluster, IsSingleton, tip.label)
View(singleton.df3b)
MadaDBdata_filt <- MadaDBdata_filt %>%
dplyr::left_join(singleton.df3, by = "Isolate.ID")
library(ape)
tree.original <- ape::read.tree('trees/tree/nwk/madaDB.rooted.tree.nwk')
names.to.keep <- singleton.df3$tip.label
keep <- intersect(names.to.keep, tree.original$tip.label)
tree.pruned <- keep.tip(tree.original, keep)
tree.pruned$tip.label
plot(tree.pruned)
library(ggtree)
library(ggtreeExtra)
library(treeio)
tree.original.ggtree.517 <- ggtree(tree.pruned, branch.length = "none", size = 0.5) %<+% MadaDBdata_filt +
geom_tree(aes(color = DirTax_Class)) +
scale_color_manual(name = "Class", values = c(
"Actinobacteria" = "#4E79A7",
"Deinococci" = "#F28E2B",
"Alphaproteobacteria" = "#E15759",
"Gammaproteobacteria" = "#76B7B2",
"Betaproteobacteria" = "#59A14F",
"Flavobacteriia" = "#EDC948",
"Sphingobacteriia" = "#B07AA1",
"Bacilli" = "#FF9DA7",
"[Saprospirae]" = "#ff833a",
"Cytophagia" = "#a3b"
), na.value = "grey") +
ggnewscale::new_scale_color() +
geom_tippoint(aes(color = IsSingleton), shape = 16, size = 8) +
scale_color_manual(values = c(
"TRUE" = "green",
"FALSE" = "black",
"NA" = "grey"
), name = "Inhibition Status") +
geom_tiplab() +
theme_tree()
tree.original.ggtree.517
names.to.keep <- singleton.df3$tip.label
names.to.keep <- singleton.df3b$tip.label
keep <- intersect(names.to.keep, tree.original$tip.label)
tree.pruned <- keep.tip(tree.original, keep)
tree.pruned$tip.label
plot(tree.pruned)
library(ggtree)
library(ggtreeExtra)
library(treeio)
tree.original.ggtree.517 <- ggtree(tree.pruned, branch.length = "none", size = 0.5) %<+% MadaDBdata_filt +
geom_tree(aes(color = DirTax_Class)) +
scale_color_manual(name = "Class", values = c(
"Actinobacteria" = "#4E79A7",
"Deinococci" = "#F28E2B",
"Alphaproteobacteria" = "#E15759",
"Gammaproteobacteria" = "#76B7B2",
"Betaproteobacteria" = "#59A14F",
"Flavobacteriia" = "#EDC948",
"Sphingobacteriia" = "#B07AA1",
"Bacilli" = "#FF9DA7",
"[Saprospirae]" = "#ff833a",
"Cytophagia" = "#a3b"
), na.value = "grey") +
ggnewscale::new_scale_color() +
geom_tippoint(aes(color = IsSingleton), shape = 16, size = 8) +
scale_color_manual(values = c(
"TRUE" = "green",
"FALSE" = "black",
"NA" = "grey"
), name = "Inhibition Status") +
geom_tiplab() +
theme_tree()
tree.original.ggtree.517
View(MadaDBdata_filt)
tree.original.ggtree.517 <- ggtree(tree.pruned, branch.length = "none", size = 0.5) %<+% MadaDBdata_filt +
geom_tree(aes(color = DirTax_Class.x)) +
scale_color_manual(name = "Class", values = c(
"Actinobacteria" = "#4E79A7",
"Deinococci" = "#F28E2B",
"Alphaproteobacteria" = "#E15759",
"Gammaproteobacteria" = "#76B7B2",
"Betaproteobacteria" = "#59A14F",
"Flavobacteriia" = "#EDC948",
"Sphingobacteriia" = "#B07AA1",
"Bacilli" = "#FF9DA7",
"[Saprospirae]" = "#ff833a",
"Cytophagia" = "#a3b"
), na.value = "grey") +
ggnewscale::new_scale_color() +
geom_tippoint(aes(color = IsSingleton), shape = 16, size = 8) +
scale_color_manual(values = c(
"TRUE" = "green",
"FALSE" = "black",
"NA" = "grey"
), name = "Inhibition Status") +
geom_tiplab() +
theme_tree()
tree.original.ggtree.517
ggsave("singleton_517_tree2.pdf", tree.original.ggtree.517, height = 400, width = 50, dpi = 800, limitsize = FALSE)
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
#need this to have the full list of ids to make the tree
MadaDB_VsearchClusters_wdata_nest.singleton = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
#filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
summary_fxn = function(x){
x %>% ## called x because thats what the position in the map function is called
group_by(`anti-Bd Class (80%)`) %>%
summarize(Count = n()) %>%
pivot_wider(.,names_from = `anti-Bd Class (80%)`,values_from = Count)
} # this is a function that does the summarizing by function category and then organizes it for better viewing.
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
mutate(TotalIso = map(data,~ nrow(.x)))%>%
mutate(FunctionCount = map(data,summary_fxn)) %>% # this creates the function categories
unnest(FunctionCount) # this allows the function categories to be viewed in the nested frame and "operated" on
MadaDB_VsearchClusters_wdata_nest_nosingles = MadaDB_VsearchClusters_wdata_nest %>%
filter(TotalIso > 1) %>% # filter clusters with 1 isolate
drop_na(Inhibitory,NonInhibitory) %>%
mutate(InhibitoryRatio = paste(Inhibitory,".",NonInhibitory))
## List of IDs for tree for all cluster dataset
MadaDB_VsearchClusters_wdata_nestnosingles_IDs = MadaDB_VsearchClusters_wdata_nest517 %>%
unnest(data) %>%
select(Id.Match) %>%
filter(!Id.Match == "*") %>% ## This is needed to remove the creation of an "asterisk" group
unique()
View(MadaDB_VsearchClusters_wdata_nest_nosingles)
View(MadaDB_VsearchClusters_wdata_nest_nosingles[[2]][[1]])
nest108 <- MadaDB_VsearchClusters_wdata_nestnosingles_IDs %>%
tidyr::unnest(data) %>%
dplyr::filter(Record == "S")
MadaDB_VsearchClusters_wdata_nestnosingles_IDs = MadaDB_VsearchClusters_wdata_nestnosingles_IDs
MadaDB_VsearchClusters_wdata_nestnosingles = MadaDB_VsearchClusters_wdata_nestnosingles
MadaDB_VsearchClusters_wdata_nest_nosingles = MadaDB_VsearchClusters_wdata_nest %>%
filter(TotalIso > 1) %>% # filter clusters with 1 isolate
drop_na(Inhibitory,NonInhibitory) %>%
mutate(InhibitoryRatio = paste(Inhibitory,".",NonInhibitory))
MadaDB_VsearchClusters_wdata_nestnosingles = MadaDB_VsearchClusters_wdata_nestnosingles
MadaDB_VsearchClusters_wdata_nestnosingles = MadaDB_VsearchClusters_wdata_nestnosingles
nest108 <- MadaDB_VsearchClusters_wdata_nestnosingles_IDs %>%
tidyr::unnest(data) %>%
dplyr::filter(Record == "S")
nest108 <- MadaDB_VsearchClusters_wdata_nestnosingles %>%
tidyr::unnest(data) %>%
dplyr::filter(Record == "S")
MadaDB_VsearchClusters_wdata_nestnosingles <- MadaDB_VsearchClusters_wdata_nestnosingles
nest108 <- MadaDB_VsearchClusters_wdata_nestnosingles %>%
tidyr::unnest(data) %>%
dplyr::filter(Record == "S")
View(MadaDB_VsearchClusters_wdata_nest_nosingles)
## List of IDs for tree for all cluster dataset
MadaDB_VsearchClusters_wdata_nestnosingles_IDs = MadaDB_VsearchClusters_wdata_nest517 %>%
unnest(data) %>%
select(Id.Match) %>%
filter(!Id.Match == "*") %>% ## This is needed to remove the creation of an "asterisk" group
unique()
summary_fxn = function(x){
x %>% ## called x because thats what the position in the map function is called
group_by(`anti-Bd Class (80%)`) %>%
summarize(Count = n()) %>%
pivot_wider(.,names_from = `anti-Bd Class (80%)`,values_from = Count)
} # this is a function that does the summarizing by function category and then organizes it for better viewing.
#MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
# mutate(TotalIso = map(data,~ nrow(.x)))
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
mutate(TotalIso = map(data,~ nrow(.x)))%>%
mutate(FunctionCount = map(data,summary_fxn)) %>% # this creates the function categories
unnest(FunctionCount) # this allows the function categories to be viewed in the nested frame and "operated" on
summary_fxn = function(x){
x %>% ## called x because thats what the position in the map function is called
group_by(`anti-Bd Class (80%)`) %>%
summarize(Count = n()) %>%
pivot_wider(.,names_from = `anti-Bd Class (80%)`,values_from = Count)
} # this is a function that does the summarizing by function category and then organizes it for better viewing.
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
mutate(TotalIso = map(data,~ nrow(.x)))%>%
mutate(FunctionCount = map(data,summary_fxn)) %>% # this creates the function categories
unnest(FunctionCount) # this allows the function categories to be viewed in the nested frame and "operated" on
rm(list = ls())
library(tidyverse)
MadaDBdata = read_tsv("./MadaCultureDB_Metadata.txt")
MadaDBdata_filt = MadaDBdata %>%
group_by(Isolate.ID) %>% slice_head() %>% # filters to 1 sequence per group
ungroup() %>%
select(Isolate.ID,Frog.ID,`proportion growth 1`,`anti-Bd Class (80%)`,Taxnonomy,DirTax_Phylum,DirTax_Class,DirTax_Order,DirTax_Family,DirTax_Genus,DirTax_Species) # selecting only a subset of columns for now for easier viewing
MadaDB_VsearchClusters2 = read_tsv("./MadaCultureDB_seqs_clustered_per100_050725.txt") %>%
select(Record,Cluster,Isolate.ID,Id.Match) # selecting relevant columns
## merging clustering with Mada DB metadata that has had the dubs filtered
## NOTE Vsearch was not done with the duplicate filtered fasta...I think that's OK for now.but it does mean that there could be isolates with same ID that are "different" clusters because there are some that didn't ID to the same taxonomy.
MadaDB_VsearchClusters_wdata = left_join(MadaDB_VsearchClusters2,
MadaDBdata_filt,
by = "Isolate.ID")
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
#need this to have the full list of ids to make the tree
MadaDB_VsearchClusters_wdata_nest.singleton = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
#filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
##matching this to where I can actually get the isolate IDs to match the cluster.
singelton.ids <- MadaDB_VsearchClusters_wdata_nest.singleton$Cluster
singleton.df <- MadaDB_VsearchClusters2 %>%
dplyr::filter(Cluster %in% singelton.ids) %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df2 <- MadaDB_VsearchClusters_wdata_nest.singleton %>%
dplyr::mutate(IsSingleton = purrr::map_int(data, nrow) == 1)
singleton.df2 <- singleton.df2 %>%
dplyr::left_join(MadaDB_VsearchClusters2, by = "Cluster") %>%
dplyr::filter(!Record=="C") %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df3 <- singleton.df2 %>%
dplyr::left_join(MadaDBdata_filt, by = "Isolate.ID") %>%
dplyr::rename(Inhibition = `anti-Bd Class (80%)`)
singleton.df3b <- singleton.df3 %>%
dplyr::rename(tip.label = Isolate.ID) %>%
dplyr::select(Cluster, IsSingleton, tip.label)
MadaDBdata_filt <- MadaDBdata_filt %>%
dplyr::left_join(singleton.df3, by = "Isolate.ID")
summary_fxn = function(x){
x %>% ## called x because thats what the position in the map function is called
group_by(`anti-Bd Class (80%)`) %>%
summarize(Count = n()) %>%
pivot_wider(.,names_from = `anti-Bd Class (80%)`,values_from = Count)
} # this is a function that does the summarizing by function category and then organizes it for better viewing.
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
mutate(TotalIso = map(data,~ nrow(.x)))%>%
mutate(FunctionCount = map(data,summary_fxn)) %>% # this creates the function categories
unnest(FunctionCount) # this allows the function categories to be viewed in the nested frame and "operated" on
MadaDB_VsearchClusters_wdata_nest_nosingles = MadaDB_VsearchClusters_wdata_nest %>%
filter(TotalIso > 1) %>% # filter clusters with 1 isolate
drop_na(Inhibitory,NonInhibitory) %>%
mutate(InhibitoryRatio = paste(Inhibitory,".",NonInhibitory))
## List of IDs for tree for all cluster dataset
MadaDB_VsearchClusters_wdata_nestnosingles_IDs = MadaDB_VsearchClusters_wdata_nest517 %>%
unnest(data) %>%
select(Id.Match) %>%
filter(!Id.Match == "*") %>% ## This is needed to remove the creation of an "asterisk" group
unique()
MadaDB_VsearchClusters_wdata_nestnosingles <- MadaDB_VsearchClusters_wdata_nestnosingles
nest108 <- MadaDB_VsearchClusters_wdata_nestnosingles %>%
tidyr::unnest(data) %>%
dplyr::filter(Record == "S")
rm(list = ls())
library(tidyverse)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: cars
rm(list = ls())
library(tidyverse)
# Chunk 3
## merging Madagascar database metadata (culture info, etc) with Vsearch 100% clusterIDs
## sorted by seq plate, toxonomy string then isolate ID in excel before creation
MadaDBdata = read_tsv("./MadaCultureDB_Metadata.txt")
## This deals with the duplicate entries for the isolates; its not perfect, it just selects the first entry from the sorted file
MadaDBdata_filt = MadaDBdata %>%
group_by(Isolate.ID) %>% slice_head() %>% # filters to 1 sequence per group
ungroup() %>%
select(Isolate.ID,Frog.ID,`proportion growth 1`,`anti-Bd Class (80%)`,Taxnonomy,DirTax_Phylum,DirTax_Class,DirTax_Order,DirTax_Family,DirTax_Genus,DirTax_Species) # selecting only a subset of columns for now for easier viewing
# Chunk 4
#(vsearch) mcbletz@Mollys-MacBook-Pro-2 ~ % vsearch --cluster_fast /Users/mcbletz/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/Bletz_Lab/Computational_Resources/Datasets/CultureData/MadaCultureDB_seqs_dupsfilt.fasta --uc /Users/mcbletz/Library/CloudStorage/OneDrive-ThePennsylvaniaStateUniversity/Bletz_Lab/Computational_Resources/Datasets/CultureData/MadaCultureDB_seqs_clustered_per100_050725.txt --id 1 --strand both
##*** MODIFIED HEADERS AND COLUMNS MANUALLY IN EXCEL
## Vsearch done with fasta from MadaDB file filtered for duplicates; this has more isolates than AmphiBac; This is the vsearch output (code above); Dup filtering completed with MadaDB_VsearchClusterMergeCode.R file.
MadaDB_VsearchClusters2 = read_tsv("./MadaCultureDB_seqs_clustered_per100_050725.txt") %>%
select(Record,Cluster,Isolate.ID,Id.Match) # selecting relevant columns
# Chunk 5
## merging clustering with Mada DB metadata that has had the dubs filtered
## NOTE Vsearch was not done with the duplicate filtered fasta...I think that's OK for now.but it does mean that there could be isolates with same ID that are "different" clusters because there are some that didn't ID to the same taxonomy.
MadaDB_VsearchClusters_wdata = left_join(MadaDB_VsearchClusters2,
MadaDBdata_filt,
by = "Isolate.ID")
#write_tsv(MadaDB_VsearchClusters_wdata,"./MadaCultureDB_Metadata_wVsearchClusters.txt")
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
#need this to have the full list of ids to make the tree
MadaDB_VsearchClusters_wdata_nest.singleton = MadaDB_VsearchClusters_wdata %>%
filter(!Record=="C") %>% # removing these records that are not important for the clustering its a duplicate of the S ids; only "S" and "H" retained
filter(`anti-Bd Class (80%)` == "Inhibitory" | `anti-Bd Class (80%)` == "NonInhibitory") %>%
#filter(`proportion growth 1` > 0.75 | `proportion growth 1` < 0.25) %>% #added this to filter to extreme function
group_by(Cluster) %>%
nest()
##matching this to where I can actually get the isolate IDs to match the cluster.
singelton.ids <- MadaDB_VsearchClusters_wdata_nest.singleton$Cluster
singleton.df <- MadaDB_VsearchClusters2 %>%
dplyr::filter(Cluster %in% singelton.ids) %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df2 <- MadaDB_VsearchClusters_wdata_nest.singleton %>%
dplyr::mutate(IsSingleton = purrr::map_int(data, nrow) == 1)
singleton.df2 <- singleton.df2 %>%
dplyr::left_join(MadaDB_VsearchClusters2, by = "Cluster") %>%
dplyr::filter(!Record=="C") %>%
dplyr::group_by(Cluster) %>%
dplyr::slice_head(n = 1)
singleton.df3 <- singleton.df2 %>%
dplyr::left_join(MadaDBdata_filt, by = "Isolate.ID") %>%
dplyr::rename(Inhibition = `anti-Bd Class (80%)`)
singleton.df3b <- singleton.df3 %>%
dplyr::rename(tip.label = Isolate.ID) %>%
dplyr::select(Cluster, IsSingleton, tip.label)
MadaDBdata_filt <- MadaDBdata_filt %>%
dplyr::left_join(singleton.df3, by = "Isolate.ID")
MadaDB_VsearchClusters_wdata_nestnosingles <- MadaDB_VsearchClusters_wdata_nestnosingles
MadaDB_VsearchClusters_wdata_nestnosingles <- as.data.frame(MadaDB_VsearchClusters_wdata_nestnosingles)
summary_fxn = function(x){
x %>% ## called x because thats what the position in the map function is called
group_by(`anti-Bd Class (80%)`) %>%
summarize(Count = n()) %>%
pivot_wider(.,names_from = `anti-Bd Class (80%)`,values_from = Count)
} # this is a function that does the summarizing by function category and then organizes it for better viewing.
MadaDB_VsearchClusters_wdata_nest = MadaDB_VsearchClusters_wdata_nest %>%
mutate(TotalIso = map(data,~ nrow(.x)))%>%
mutate(FunctionCount = map(data,summary_fxn)) %>% # this creates the function categories
unnest(FunctionCount) # this allows the function categories to be viewed in the nested frame and "operated" on
MadaDB_VsearchClusters_wdata_nest_nosingles = MadaDB_VsearchClusters_wdata_nest %>%
filter(TotalIso > 1) %>% # filter clusters with 1 isolate
drop_na(Inhibitory,NonInhibitory) %>%
mutate(InhibitoryRatio = paste(Inhibitory,".",NonInhibitory))
MadaDB_VsearchClusters_wdata_nestnosingles <- as.data.frame(MadaDB_VsearchClusters_wdata_nestnosingles)
MadaDB_VsearchClusters_wdata_nestnosingles <- data.frame(MadaDB_VsearchClusters_wdata_nestnosingles)
